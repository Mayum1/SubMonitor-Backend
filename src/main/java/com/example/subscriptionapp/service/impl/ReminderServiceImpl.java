package com.example.subscriptionapp.service.impl;

import com.example.subscriptionapp.model.Reminder;
import com.example.subscriptionapp.model.Subscription;
import com.example.subscriptionapp.repository.ReminderRepository;
import com.example.subscriptionapp.service.ReminderService;
import com.example.subscriptionapp.service.TelegramNotificationService;
import com.example.subscriptionapp.service.TelegramLinkService;
import com.example.subscriptionapp.model.TelegramLink;
import com.example.subscriptionapp.service.EmailNotificationService;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

@Service
@Transactional
public class ReminderServiceImpl implements ReminderService {

    private final ReminderRepository reminderRepository;
    private final TelegramNotificationService telegramNotificationService;
    private final TelegramLinkService telegramLinkService;
    private final EmailNotificationService emailNotificationService;

    // –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
    private List<Reminder> nextHourReminders = new ArrayList<>();
    // –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–µ—Ä–≤–µ—Ä–∞
    private final ZoneId serverZoneId = ZoneOffset.ofHours(3);

    public ReminderServiceImpl(ReminderRepository reminderRepository, TelegramNotificationService telegramNotificationService, TelegramLinkService telegramLinkService, EmailNotificationService emailNotificationService) {
        this.reminderRepository = reminderRepository;
        this.telegramNotificationService = telegramNotificationService;
        this.telegramLinkService = telegramLinkService;
        this.emailNotificationService = emailNotificationService;
    }

    @Override
    public Reminder createReminder(Reminder reminder) {
        return reminderRepository.save(reminder);
    }

    @Override
    public Optional<Reminder> getReminderById(Long id) {
        return reminderRepository.findById(id);
    }

    @Override
    public List<Reminder> getRemindersBySubscription(Subscription subscription) {
        return reminderRepository.findBySubscription(subscription);
    }

    @Override
    public Reminder updateReminder(Long id, Reminder reminder) {
        Reminder existing = reminderRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Reminder not found with id " + id));
        existing.setDaysBefore(reminder.getDaysBefore());
        existing.setTimeOfDay(reminder.getTimeOfDay());
        existing.setIsEnabled(reminder.getIsEnabled());
        return reminderRepository.save(existing);
    }

    @Override
    public void deleteReminder(Long id) {
        reminderRepository.deleteById(id);
    }

    // –ú–µ—Ç–æ–¥ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    @Scheduled(cron = "0 55 * * * *")
    public void preCalculateRemindersForNextHour() {
        nextHourReminders.clear();
        // –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è
        LocalDateTime now = LocalDateTime.now(serverZoneId);
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        LocalDateTime nextHourStart = now.plusHours(1).withMinute(0).withSecond(0).withNano(0);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∫–ª—é—á—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        List<Reminder> allReminders = reminderRepository.findAll();
        for (Reminder reminder : allReminders) {
            if (!reminder.getIsEnabled()) {
                continue;
            }
            Subscription subscription = reminder.getSubscription();
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏
            LocalDate scheduledSendDate = subscription.getNextPaymentDate().minusDays(reminder.getDaysBefore());
            // –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            LocalTime scheduledTime = reminder.getTimeOfDay();
            // –°–æ–±–∏—Ä–∞–µ–º LocalDateTime –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            LocalDateTime scheduledLocal = LocalDateTime.of(scheduledSendDate, scheduledTime);

            // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            String userTimezoneString = subscription.getUser().getDefaultTimezone();
            ZoneId userZoneId;
            try {
                userZoneId = ZoneId.of(userTimezoneString);
            } catch (Exception e) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–µ—Ä–≤–µ—Ä–∞
                userZoneId = serverZoneId;
            }

            // –°–æ–∑–¥–∞–µ–º ZonedDateTime –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ZonedDateTime userScheduledZdt = scheduledLocal.atZone(userZoneId);
            // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            ZonedDateTime scheduledServerZdt = userScheduledZdt.withZoneSameInstant(serverZoneId);

            // –ï—Å–ª–∏ —á–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if (scheduledServerZdt.getHour() == nextHourStart.getHour() &&
                    scheduledServerZdt.toLocalDate().equals(nextHourStart.toLocalDate())) {
                nextHourReminders.add(reminder);
            }
        }
        System.out.println("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ " + nextHourReminders.size() +
                " –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞ (" + nextHourStart + ").");
    }

    // –ú–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    @Scheduled(cron = "0 0 * * * *")
    public void sendPreCalculatedReminders() {
        if (nextHourReminders.isEmpty()) {
            System.out.println("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Å.");
            return;
        }
        for (Reminder reminder : nextHourReminders) {
            sendReminder(reminder);
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
            reminder.setLastSentAt(LocalDateTime.now(serverZoneId));
            reminderRepository.save(reminder);
        }
        nextHourReminders.clear();
        System.out.println("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞.");
    }

    private void sendReminder(Reminder reminder) {
        System.out.println("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ ID: " +
                reminder.getSubscription().getId() + " –ø–æ –≤—Ä–µ–º–µ–Ω–∏ " + reminder.getTimeOfDay());

        // Get the user from the subscription
        Long userId = reminder.getSubscription().getUser().getId();
        // Check if the user has a linked Telegram account
        Optional<TelegramLink> telegramLink = telegramLinkService.getTelegramLinkByUserId(userId);
        String message = null;
        if (telegramLink.isPresent()) {
            String chatId = telegramLink.get().getChatId();
            Subscription subscription = reminder.getSubscription();
            LocalDate paymentDate = subscription.getNextPaymentDate();
            // Format date with Russian month name
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM yyyy", new Locale("ru"));
            String formattedDate = paymentDate.format(formatter);
            message = String.format("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ %s –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ %d –¥–Ω–µ–π (%s).",
                    subscription.getTitle(),
                    reminder.getDaysBefore(),
                    formattedDate);
            telegramNotificationService.sendMessage(chatId, message);
        }
        // Send email notification (always)
        if (message == null) {
            Subscription subscription = reminder.getSubscription();
            LocalDate paymentDate = subscription.getNextPaymentDate();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d MMMM yyyy", new Locale("ru"));
            String formattedDate = paymentDate.format(formatter);
            message = String.format("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ %s –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ %d –¥–Ω–µ–π (%s).",
                    subscription.getTitle(),
                    reminder.getDaysBefore(),
                    formattedDate);
        }
        String userEmail = reminder.getSubscription().getUser().getEmail();
        String emailSubject = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ: " + reminder.getSubscription().getTitle();
        emailNotificationService.sendEmail(userEmail, emailSubject, message);
    }
}
